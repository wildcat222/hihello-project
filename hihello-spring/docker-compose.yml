version: '3.9'
services:
  # Zookeeper 서비스
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - kafka-net

  # Kafka 서비스
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "10000:10000"
    environment:
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092, EXTERNAL://0.0.0.0:10000
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092, EXTERNAL://localhost:10000
      KAFKA_LISTENER_NAMES: INSIDE,EXTERNAL
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT, EXTERNAL:PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_PORT: 9092
      KAFKA_LISTENER_EXTERNAL_PORT: 10000
      KAFKA_LISTENERS_INTER_BROKER: INSIDE://0.0.0.0:9092  # 브로커 간 통신을 위한 리스너 설정 (여기서는 INSIDE 리스너를 사용)
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    depends_on:
      - zookeeper
    volumes:
      - /var/run/docker.sock
    networks:
      - kafka-net

  # Kafka UI 서비스
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "9091:8080"  # Kafka UI의 포트 8080을 외부 9091로 바인딩
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092  # Kafka 주소 설정
    networks:
      - kafka-net

  mongodb:
    image: mongo:latest
    container_name: ${MONGO_CONTAINER_NAME}
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER_NAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
#    command: ["--noauth"]
    volumes:
      - mongodb_data:/data/db

  redis:
    image: redis:7.0
    container_name: redis
    ports:
      - "6379:6379" # Redis 기본 포트
    command: redis-server --requirepass ${REDIS_PASSWORD} # 비밀번호 설정
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD} # 비밀번호를 환경 변수에서 읽음
    volumes:
      - redis_data:/data # 데이터 지속성을 위한 볼륨 설정

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.1
    container_name: elasticsearch
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "9200:9200" # Elasticsearch API 접근 포트
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - elk

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.14.1
    environment:
      SERVER_NAME: kibana
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - elk

volumes:
  mongodb_data:
  redis_data:
  elasticsearch_data:

networks:
  kafka-net:
    driver: bridge
  elk:
    driver: bridge