plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.6'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'spring'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

jar {
	enabled = false
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	// stomp
	implementation group: 'org.webjars', name: 'stomp-websocket', version: '2.3.3-1'
	implementation 'org.json:json:20240303'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-freemarker'
	testImplementation 'org.springframework.kafka:spring-kafka-test'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// ModelMapper : DTO -> Entity OR Entity -> DTO
	implementation group: 'org.modelmapper', name: 'modelmapper', version: '3.1.1'

	// log4j2
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

	implementation 'software.amazon.awssdk:s3:2.20.87'

	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	implementation 'org.mariadb.jdbc:mariadb-java-client:3.1.4'
	implementation 'org.hibernate:hibernate-core:6.5.3.Final'

	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// MyBatis
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.3'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Jsoup (wiki에서 html 파싱)
	implementation group: 'org.jsoup', name: 'jsoup', version: '1.15.3'

	// Elasticsearch
	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
}

bootRun {
	if (file('.env').exists()) {
		file('.env').readLines().each() {
			if (!it.isEmpty() && !it.startsWith("#")) {
				def pos = it.indexOf("=")
				def key = it.substring(0, pos)
				def value = it.substring(pos + 1)

				if (System.getenv(key) == null) {
					environment key, value
				}
			}
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
